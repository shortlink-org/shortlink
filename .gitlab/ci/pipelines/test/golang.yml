include:
  # https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/lib/gitlab/ci/templates/Security/Coverage-Fuzzing.gitlab-ci.yml
  - template: Security/Coverage-Fuzzing.gitlab-ci.yml
  - template: Jobs/Code-Intelligence.gitlab-ci.yml
  - local: .gitlab/ci/templates/common.yml
  - local: .gitlab/ci/templates/go.yml

code_intelligence_go:
  stage: .pre
  image: sourcegraph/scip-go:latest
  allow_failure: true # recommended
  script:
    - lsif-go
  artifacts:
    reports:
      lsif: dump.lsif
    expire_in: 14 days
  rules:
    - when: manual # very long-running job, only run manually

gotest:
  extends:
    - .go-cache
    - .job_teplate_go
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
    CGO_CFLAGS: "-g -O2 -Wno-return-local-addr"
    CGO_ENABLED: 1
  before_script:
    - apk add --update gcc musl-dev
    - go work vendor
    - go install github.com/boumenot/gocover-cobertura@latest
    - go install gotest.tools/gotestsum@latest
  script:
    - $GOPATH/bin/gotestsum --junitfile report.xml --format testname -- -race -coverprofile=coverage.txt -covermode atomic ./...
    - $GOPATH/bin/gocover-cobertura < coverage.txt > coverage.xml
    - go tool cover -func coverage.txt
  allow_failure: true
  coverage: '/total:.*\d+.\d+%/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
    paths:
      - coverage.xml
    expire_in: 14 days
    expose_as: 'Code Coverage'
  needs: []
  rules:
    - when: always

golint:
  extends:
    - .go-cache
    - .job_teplate_go
  image:
    name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/golangci/golangci-lint:v1.59.1-alpine
    entrypoint: [""]
  before_script:
    - apk add --no-cache jq
    - go work vendor
  script:
    - golangci-lint run --out-format code-climate:codequality.json,colored-line-number ./...
  allow_failure: true
  artifacts:
    reports:
      codequality: codequality.json
    paths:
      - codequality.json
    expire_in: 1 month
  needs: []
  rules:
    - when: always

go_fuzz_test:
  extends: .fuzz_base
  stage: test
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/golang:1.22.2-alpine
  variables:
    COVFUZZ_SEED_CORPUS: './seed_corpus'
  before_script:
    - apk add --no-cache clang git
    - go get -u github.com/dvyukov/go-fuzz/go-fuzz github.com/dvyukov/go-fuzz/go-fuzz-build
    - go install -v github.com/dvyukov/go-fuzz/go-fuzz github.com/dvyukov/go-fuzz/go-fuzz-build
  script:
    # link package
    - GITLAB_COV_FUZZ_PATH=`pwd`
    - cd $CI_PROJECT_DIR/boundaries/link/link/domain/link/v1
    - go-fuzz-build -libfuzzer -o link_fuzz_target.a .
    - clang -fsanitize=fuzzer link_fuzz_target.a -o link_fuzz_target
    - $GITLAB_COV_FUZZ_PATH/gitlab-cov-fuzz run --regression=$REGRESSION -- ./link_fuzz_target
  allow_failure: true
  needs: []
  rules:
    # TODO: research
    - when: never
