# Common default values for argo-cd.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
# Ref: https://github.com/argoproj/argo-cd

argo-cd:
  enabled: true

  fullnameOverride: argocd

  global:
    domain: argo.shortlink.best

    # image:
    #   tag: "v2.12.0"

    networkPolicy:
      create: true

    logging:
      format: json
      level: warn

  controller:
    replicas: 1
    revisionHistoryLimit: 3

    resources:
      limits:
        cpu: 2000m
        memory: 3Gi
      requests:
        cpu: 250m
        memory: 512Mi

    metrics:
      enabled: true
      applicationLabels:
        enabled: true
      serviceMonitor:
        enabled: true

    rules:
      enabled: true
      spec:
        - alert: ArgoAppMissing
          expr: |
            absent(argocd_app_info)
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: "[Argo CD] No reported applications"
            description: >
              Argo CD has not reported any applications data for the past 15 minutes which
              means that it must be down or not functioning properly.  This needs to be
              resolved for this cloud to continue to maintain state.
        - alert: ArgoAppNotSynced
          expr: |
            argocd_app_info{sync_status!="Synced"} == 1
          for: 12h
          labels:
            severity: warning
          annotations:
            summary: "[{{`{{$labels.name}}`}}] Application not synchronized"
            description: >
             The application [{{`{{$labels.name}}`}} has not been synchronized for over
              12 hours which means that the state of this cloud has drifted away from the
              state inside Git.

  dex:
    enabled: true

    image:
      tag: latest-alpine

    env:
      - name: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            name: argo-workflows-sso
            key: client-secret

    resources:
      limits:
        cpu: 300m
        memory: 128Mi
      requests:
        cpu: 20m
        memory: 64Mi

    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: prometheus-operator

  redis:
    enabled: false

  externalRedis:
    host: redis-master.argocd

  server:
    replicas: 1

    autoscaling:
      enabled: false

    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

    ingress:
      enabled: true

      ingressClassName: nginx

      annotations:
        cert-manager.io/cluster-issuer: cert-manager-production
        nginx.ingress.kubernetes.io/backend-protocol: HTTP
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        nginx.ingress.kubernetes.io/configuration-snippet: |-
          proxy_ssl_server_name on;
          proxy_ssl_name $host;
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.ingress.kubernetes.io/secure-backends: "true"
        nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
        nginx.ingress.kubernetes.io/enable-opentelemetry: "true"

      hostname: argo.shortlink.best

      extraTls:
        - secretName: argo-ingress-tls
          hosts:
            - argo.shortlink.best

    rbac:
      policy.csv: |
        p, role:readonly, extensions, invoke, httpbin, metrics, allow
        p, role:org-admin, applications, *, */*, allow
        p, role:org-admin, clusters, get, *, allow
        p, role:org-admin, repositories, get, *, allow
        p, role:org-admin, repositories, create, *, allow
        p, role:org-admin, repositories, update, *, allow
        p, role:org-admin, repositories, delete, *, allow
        p, role:org-admin, exec, create, */*, allow
        g, shortlink-org:devops, role:org-admin
      policy.default: role:readonly

    extensions:
      enabled: true

      extensionList:
        - name: rollout-extension
          env:
            - name: EXTENSION_URL
              value: https://github.com/argoproj-labs/rollout-extension/releases/download/v0.3.5/extension.tar
        - name: extension-metrics
          env:
            - name: EXTENSION_URL
              value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.3/extension.tar.gz
            - name: EXTENSION_CHECKSUM_URL
              value: https://github.com/argoproj-labs/argocd-extension-metrics/releases/download/v1.0.3/extension_checksums.txt
        - name: shortlink-extension-docs
          env:
            - name: EXTENSION_URL
              value: https://github.com/shortlink-org/shortlink/raw/main/boundaries/platform/argocd-extension-docs/ui/dist/extension.tar

  repoServer:
    replicas: 1

    autoscaling:
      enabled: false

    serviceAccount:
      create: true
      name: argocd-repo-server

    rbac:
      - apiGroups:
          - ""
        resources:
          - secrets
        verbs:
          - get
      - apiGroups:
          - ""
        resources:
          - pods/exec
        verbs:
          - create

    env:
      - name: ARGOCD_EXEC_TIMEOUT
        value: 5m
      - name: HELM_PLUGINS
        value: /custom-tools/helm-plugins/
      - name: HELM_SECRETS_SOPS_PATH
        value: /custom-tools/sops
      - name: HELM_SECRETS_VALS_PATH
        value: /custom-tools/vals
      - name: HELM_SECRETS_KUBECTL_PATH
        value: /custom-tools/kubectl
      - name: HELM_SECRETS_CURL_PATH
        value: /custom-tools/curl
      # https://github.com/jkroepke/helm-secrets/wiki/Security-in-shared-environments
      - name: HELM_SECRETS_VALUES_ALLOW_SYMLINKS
        value: "false"
      - name: HELM_SECRETS_VALUES_ALLOW_ABSOLUTE_PATH
        value: "false"
      - name: HELM_SECRETS_VALUES_ALLOW_PATH_TRAVERSAL
        value: "false"
    # helm secrets wrapper mode installation (optional)
    # - name: HELM_SECRETS_HELM_PATH
    #   value: /usr/local/bin/helm

    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

    volumes:
      - name: custom-tools
        emptyDir: {}
      - name: sops-gpg
        secret:
          secretName: sops-gpg

    volumeMounts:
      - mountPath: /custom-tools
        name: custom-tools
      - mountPath: /sops-gpg/
        name: sops-gpg
    # helm secrets wrapper mode installation (optional)
    #  - mountPath: /usr/local/sbin/helm
    #    subPath: helm
    #    name: custom-tools

    resources:
      limits:
        cpu: 3000m
        memory: 1024Mi
      requests:
        cpu: 500m
        memory: 128Mi

    initContainers:
      - name: download-tools
        image: alpine:latest
        command: [ sh, -ec ]
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          seccompProfile:
            type: RuntimeDefault
        env:
          - name: HELM_SECRETS_VERSION
            value: "4.6.1"
          - name: KUBECTL_VERSION
            value: "1.31.1"
          - name: VALS_VERSION
            value: "0.37.3"
          - name: SOPS_VERSION
            value: "3.9.0"
        args:
          - |
            mkdir -p /custom-tools/helm-plugins
            wget -qO- https://github.com/jkroepke/helm-secrets/releases/download/v${HELM_SECRETS_VERSION}/helm-secrets.tar.gz | tar -C /custom-tools/helm-plugins -xzf-;

            wget -qO /custom-tools/sops https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops-v${SOPS_VERSION}.linux.amd64
            wget -qO /custom-tools/kubectl https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl

            wget -qO- https://github.com/variantdev/vals/releases/download/v${VALS_VERSION}/vals_${VALS_VERSION}_linux_amd64.tar.gz | tar -xzf- -C /custom-tools/ vals;

            # helm secrets wrapper mode installation (optional)
            # RUN printf '#!/usr/bin/env sh\nexec %s secrets "$@"' "${HELM_SECRETS_HELM_PATH}" >"/usr/local/sbin/helm" && chmod +x "/custom-tools/helm"

            chmod +x /custom-tools/*
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools

  applicationSet:
    replicas: 1

    resources:
      limits:
        cpu: 2000m
        memory: 1024Mi
      requests:
        cpu: 300m
        memory: 128Mi

    metrics:
      enabled: true
      serviceMonitor:
        enabled: true

  configs:
    cm:
      url: https://argo.shortlink.best

      timeout.reconciliation: 5m

      statusbadge.enabled: true

      controller.diff.server.side: "true"

      exec.enabled: "true"

      server.enable.proxy.extension: "true"
      extension.config: |-
        extensions:
          - name: metrics
            backend:
               services:
                  - url: http://argocd-metrics-server.argocd:9003

      helm.valuesFileSchemes: >-
        secrets+gpg-import, secrets+gpg-import-kubernetes,
        secrets+age-import, secrets+age-import-kubernetes,
        secrets,secrets+literal,
        https

      # https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#ignoring-rbac-changes-made-by-aggregateroles
      resource.compareoptions: |
        # disables status field diffing in specified resource types
        # ignoreAggregatedRoles: true

      resource.exclusions: |
        - apiGroups:
            - cilium.io
          kinds:
            - CiliumIdentity
          clusters:
            - "*"

    repositories:
      shortlink:
        url: https://github.com/shortlink-org/shortlink
        name: shortlink
        type: git

    params:
      # otlp.address: grafana-tempo.grafana:4317
      # https://github.com/argoproj/argo-cd/issues/11071
      dexserver.disable.tls: true
      server.insecure: true

  notifications:
    resources:
      limits:
        cpu: 1000m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 64Mi

    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
