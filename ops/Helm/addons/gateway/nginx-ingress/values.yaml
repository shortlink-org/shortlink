# Common default values for nginx-ingress.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

ingress-nginx:
  enabled: true

  # Default 404 backend
  defaultBackend:
    enabled: true

  # nginx configuration
  # Ref: https://github.com/kubernetes/ingress/blob/master/controllers/nginx/configuration.md
  controller:

    nodeSelector:
      kubernetes.io/hostname: node1

    extraEnvs:
      - name: NODE_IP
        valueFrom:
          fieldRef:
            fieldPath: status.hostIP

    # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/
    config:
      enable-opentelemetry: "true"
      opentelemetry-config: "/etc/nginx/opentelemetry.toml"
      opentelemetry-operation-name: "HTTP $request_method $service_name $uri"
      opentelemetry-trust-incoming-span: "true"
      otlp-collector-host: "grafana-tempo.grafana"
      otlp-collector-port: "4317"
      otel-max-queuesize: "2048"
      otel-schedule-delay-millis: "5000"
      otel-max-export-batch-size: "512"
      otel-service-name: "nginx-ingress" # Opentelemetry resource name
      otel-sampler: "AlwaysOn" # Also: AlwaysOff, TraceIdRatioBased
      otel-sampler-ratio: "1.0"
      otel-sampler-parent-based: "false"
      server-snippet: |
        opentelemetry_attribute "ingress.namespace" "$namespace";
        opentelemetry_attribute "ingress.service_name" "$service_name";
        opentelemetry_attribute "ingress.name" "$ingress_name";
        opentelemetry_attribute "ingress.upstream" "$proxy_upstream_name";

    # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),
    # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920
    # is merged
    hostNetwork: false

    opentelemetry:
      enabled: true

    ingressClassResource:
      default: true

    # DaemonSet or Deployment
    ##
    kind: Deployment

    podSecurityContext:
      fsGroup: 1001

    service:
      type: NodePort
      nodePorts:
        http: 80
        https: 443

    admissionWebhooks:
      enabled: false

    metrics:
      # if this port is changed, change healthz-port: in extraArgs: accordingly
      enabled: true

      serviceMonitor:
        enabled: true
        additionalLabels:
          release: prometheus-operator
        namespaceSelector:
          matchNames:
            - nginx-ingress

      prometheusRule:
        enabled: true
        additionalLabels:
          app: kube-prometheus-stack
          release: prometheus-operator
        rules:
          # These are just examples rules, please adapt them to your needs
          - alert: NGINXConfigFailed
            expr: count(nginx_ingress_controller_config_last_reload_successful == 0) > 0
            for: 1s
            labels:
              severity: critical
            annotations:
              description: bad ingress config - nginx config test failed
              summary: uninstall the latest ingress changes to allow config reloads to resume
          - alert: NGINXCertificateExpiry
            expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) < 604800
            for: 1s
            labels:
              severity: critical
            annotations:
              description: ssl certificate(s) will expire in less then a week
              summary: renew expiring certificates to avoid downtime
          - alert: NGINXTooMany500s
            expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"5.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
            for: 1m
            labels:
              severity: warning
            annotations:
              description: Too many 5XXs
              summary: More than 5% of all requests returned 5XX, this requires your attention
          - alert: NGINXTooMany400s
            expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"4.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
            for: 1m
            labels:
              severity: warning
            annotations:
              description: Too many 4XXs
              summary: More than 5% of all requests returned 4XX, this requires your attention
