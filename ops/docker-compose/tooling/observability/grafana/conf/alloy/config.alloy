logging {
    level  = "info"
    format = "json"
}

// LOKI ------------------------------------------------------------------------

// Discover docker containers to collect logs from
//
// Docs: https://grafana.com/docs/alloy/latest/reference/components/loki/loki.source.docker/#example
discovery.docker "docker_containers" {
  host = "unix:///var/run/docker.sock"
}

// Extract container name from __meta_docker_container_name label and add as label
discovery.relabel "docker_containers" {
  targets = discovery.docker.docker_containers.targets

  // container name without the leading "/"
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex         = "^/(.*)$"
    target_label  = "container"
    replacement   = "$1"
  }

  // docker compose service label if present
  rule {
    source_labels = ["__meta_docker_container_label_com_docker_compose_service"]
    target_label  = "compose_service"
    regex         = "(.*)"
    replacement   = "$1"
  }

  // stable instance label
  rule {
    target_label = "instance"
    replacement  = constants.hostname
  }
}

// Scrape logs from docker containers and send to be processed
loki.source.docker "docker_containers" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.relabel.docker_containers.output
  forward_to = [loki.process.process_logs.receiver]
}

// Process logs and send to Loki
loki.process "process_logs" {
    stage.docker { }

    forward_to = [loki.write.grafanacloud.receiver]
}

// loki.write "local" {
//  endpoint {
//    url = "http://loki:3100/loki/api/v1/push"
//  }
// }

loki.write "grafanacloud" {
  endpoint {
    url = env("LOKI_URI")

    basic_auth {
      username = env("LOKI_USERNAME")
      password = env("LOKI_PASSWORD")
    }
  }
}

// PROMETHEUS ------------------------------------------------------------------
prometheus.scrape "scrape_metrics" {
  // Scrape metrics from services running on the same host
  targets = [
    // {"__address__" = "localhost:12345", group = "infrastructure", service = "alloy"},
    {"__address__" = "coredns:9153",    group = "infrastructure", service = "coredns"},
    {"__address__" = "traefik:8082",    group = "infrastructure", service = "traefik"},
  ]

  // Setting the scrape interval lower to make it faster to be able to see the metrics
  scrape_interval = "10s"

  forward_to      = [prometheus.remote_write.grafanacloud.receiver]
}

prometheus.remote_write "grafanacloud" {
  endpoint {
    url = env("PROMETHEUS_URI")

    basic_auth {
      username = env("PROMETHEUS_USERNAME")
      password = env("PROMETHEUS_PASSWORD")
    }
  }
}

// OPENTELEMTRY ---------------------------------------------------------------
otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    metrics = [otelcol.processor.memory_limiter.default.input]
    logs    = [otelcol.processor.memory_limiter.default.input]
    traces  = [otelcol.processor.memory_limiter.default.input]
  }
}

otelcol.processor.memory_limiter "default" {
  check_interval = "1s"
  limit          = "1GiB"

  output {
    metrics = [otelcol.processor.batch.default.input]
    logs    = [otelcol.processor.batch.default.input]
    traces  = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.transform "promote_resource_attrs" {
  // Copy low-cardinality resource attrs to metric attrs
  metric_statements = [
    // OTel canonical keys (kept small to avoid cardinality blowups)
    "set(attributes[\"service_name\"], resource.attributes[\"service.name\"])",
    "set(attributes[\"service_namespace\"], resource.attributes[\"service.namespace\"])",
    "set(attributes[\"service_instance_id\"], resource.attributes[\"service.instance.id\"])",
    "set(attributes[\"deployment_environment\"], resource.attributes[\"deployment.environment.name\"])",
  ]

  output {
    metrics = [otelcol.exporter.prometheus.grafanacloud.input]
  }
}

otelcol.processor.batch "default" {
  output {
    metrics = [otelcol.processor.transform.promote_resource_attrs.input]
    logs    = [otelcol.exporter.loki.grafanacloud.input]
    traces  = [otelcol.exporter.otlp.grafanacloud.input]
  }
}

otelcol.exporter.otlp "grafanacloud" {
  client {
    endpoint = env("TEMPO_URI")
    auth     = otelcol.auth.basic.grafanacloud.handler
  }
}

otelcol.auth.basic "grafanacloud" {
  username = env("TEMPO_USERNAME")
  password = env("TEMPO_PASSWORD")
}

otelcol.exporter.loki "grafanacloud" {
  forward_to = [loki.write.grafanacloud.receiver]
}

otelcol.exporter.prometheus "grafanacloud" {
  forward_to = [prometheus.remote_write.grafanacloud.receiver]
}
