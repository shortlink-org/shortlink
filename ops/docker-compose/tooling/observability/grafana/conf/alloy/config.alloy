logging {
    level  = "info"
    format = "json"
}

// LOKI ------------------------------------------------------------------------

// Discover docker containers to collect logs from
//
// Docs: https://grafana.com/docs/alloy/latest/reference/components/loki/loki.source.docker/#example
discovery.docker "docker_containers" {
  host = "unix:///var/run/docker.sock"
}

// Extract container name from __meta_docker_container_name label and add as label
discovery.relabel "docker_containers" {
    targets = discovery.docker.docker_containers.targets

    rule {
        source_labels = ["__meta_docker_container_name"]
        target_label  = "container"
    }
}

// Scrape logs from docker containers and send to be processed
loki.source.docker "docker_containers" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.relabel.docker_containers.output
  forward_to = [loki.process.process_logs.receiver]
}

// Process logs and send to Loki
loki.process "process_logs" {
    stage.docker { }

    forward_to = [loki.write.grafanacloud.receiver]
}

// loki.write "local" {
//  endpoint {
//    url = "http://loki:3100/loki/api/v1/push"
//  }
// }

loki.write "grafanacloud" {
  endpoint {
    url = env("LOKI_URI")

    basic_auth {
      username = env("LOKI_USERNAME")
      password = env("LOKI_PASSWORD")
    }
  }
}

// PROMETHEUS ------------------------------------------------------------------
prometheus.scrape "scrape_metrics" {
  // Scrape metrics from services running on the same host
  targets = [
    // {"__address__" = "localhost:12345", group = "infrastructure", service = "alloy"},
    {"__address__" = "coredns:9153",    group = "infrastructure", service = "coredns"},
  ]

  // Setting the scrape interval lower to make it faster to be able to see the metrics
  scrape_interval = "10s"

  forward_to      = [prometheus.remote_write.grafanacloud.receiver]
}

prometheus.remote_write "grafanacloud" {
  endpoint {
    url = env("PROMETHEUS_URI")

    basic_auth {
      username = env("PROMETHEUS_USERNAME")
      password = env("PROMETHEUS_PASSWORD")
    }
  }
}

// OPENTELEMTRY ---------------------------------------------------------------
otelcol.exporter.otlp "default" {
  client {
    endpoint = env("OPENTELEMETRY_URI")
    auth     = otelcol.auth.basic.grafanacloud.handler
  }
}

otelcol.auth.basic "grafanacloud" {
  username = env("OPENTELEMETRY_USERNAME")
  password = env("OPENTELEMETRY_PASSWORD")
}

otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    metrics = [otelcol.exporter.otlp.default.input]
    logs    = [otelcol.exporter.otlp.default.input]
    traces  = [otelcol.exporter.otlp.default.input]
  }
}
