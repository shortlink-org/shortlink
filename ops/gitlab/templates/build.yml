.template_build:
  stage: build
  services:
    - name: docker:26.1.0-dind
      command: ["--experimental"]
  image: docker:26.1.0-cli
  variables:
    # GIT_STRATEGY: none # Set `none` if we use git sparse-checkout
    COSIGN_YES: "true"  # Used by Cosign to skip confirmation prompts for non-destructive operations
    DOCKER_BUILDKIT: 1
    DOCKER_CONTENT_TRUST: 1
    DOCKER_BUILDX_VERSION: v0.13.1
    BUILDX_GIT_LABELS: 1
  id_tokens:
    SIGSTORE_ID_TOKEN: # Used by Cosign to get certificate from Fulcio
      aud: sigstore
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    # Install dependencies
    - apk add curl git

    # Install buildx
    - mkdir -vp ~/.docker/cli-plugins/
    - curl --silent -L "https://github.com/docker/buildx/releases/download/$DOCKER_BUILDX_VERSION/buildx-$DOCKER_BUILDX_VERSION.linux-amd64" > ~/.docker/cli-plugins/docker-buildx
    - chmod a+x ~/.docker/cli-plugins/docker-buildx
    - DOCKER_CONTENT_TRUST=0 docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
    - docker buildx inspect --bootstrap

    # Git sparse-checkout
    # NOTE: At the moment I don't see less time to clone the repository
    # - git clone --filter=blob:none --depth=1 --branch=${CI_COMMIT_REF_NAME} ${CI_REPOSITORY_URL}
    # - cd ${CI_PROJECT_NAME}
    # - git sparse-checkout init --cone
    # - while IFS= read -r line; do git sparse-checkout set "$line"; done < $CMD_PATH/sparse-checkout.yaml
  after_script: []
    # - apk add --update cosign
    # - IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${REGISTRY_IMAGE}:${CI_COMMIT_TAG})
    # - cosign sign $IMAGE_DIGEST
  script:
    # TODO: improve work with ENV
    - cp ${UI_ENV} .env.prod
    - docker buildx build 
      --platform=linux/amd64,linux/arm64
      --provenance=true
      --sbom=true
      --build-arg APP_ENV=ci
      --build-arg CI_COMMIT_TAG=$CI_COMMIT_TAG
      --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA
      --build-arg CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME
      --build-arg CI_PIPELINE_ID=$CI_PIPELINE_ID
      --build-arg CI_PIPELINE_URL=$CI_PIPELINE_URL
      --push $CMD_PATH $DOCKERFILE_ARGS
      -o type=registry,oci-mediatypes=true,compression=estargz,force-compression=true
      -t ${REGISTRY_IMAGE}:latest
      -t ${REGISTRY_IMAGE}:${CI_COMMIT_TAG}
      -f ${DOCKERFILE_PATH} .
  tags:
    - docker
  retry: 1
  artifacts:
    expire_in: 3 week
    paths:
      - artifact.txt
      - cosign.bundle
  rules:
    - when: always

# TODO: fix this job
.template_build_kit:
  extends: .template_build
  services:
    - name: moby/buildkit:v0.13.1
      alias: buildkitd
      command:
        - --addr=tcp://0.0.0.0:1234
  image:
    name: moby/buildkit:v0.13.1
    entrypoint: [ "" ]
  variables:
    # GIT_STRATEGY: none # Set `none` if we use git sparse-checkout
    BUILDKIT_HOST: tcp://buildkitd:1234
  before_script:
    - date
  script:
    - buildctl build
        --frontend dockerfile.v0
        --local context=.
        --frontend-opt filename=${DOCKERFILE_PATH}
        --opt build-arg:APP_ENV=ci
        --opt build-arg:CI_COMMIT_TAG=$CI_COMMIT_TAG
        --opt build-arg:CI_COMMIT_SHA=$CI_COMMIT_SHA
        --opt build-arg:CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME
        --opt build-arg:CI_PIPELINE_ID=$CI_PIPELINE_ID
        --opt build-arg:CI_PIPELINE_URL=$CI_PIPELINE_URL
        --opt platform=linux/amd64,linux/arm64
        --output type=image,oci-mediatypes=true,compression=estargz,name=${REGISTRY_IMAGE}:latest,push=true
        --output type=image,oci-mediatypes=true,compression=estargz,name=${REGISTRY_IMAGE}:${CI_COMMIT_TAG},push=true
