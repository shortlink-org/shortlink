include:
  - template: Security/Coverage-Fuzzing.gitlab-ci.yml
  - template: Jobs/Code-Intelligence.gitlab-ci.yml
  - local: /ops/gitlab/templates/common.yml
  - local: /ops/gitlab/templates/go.yml

code_intelligence_go:
  stage: .pre
  image: sourcegraph/lsif-go:v1
  allow_failure: true # recommended
  script:
    - lsif-go
  artifacts:
    reports:
      lsif: dump.lsif
  rules:
    - when: always

gosec:
  extends:
    - .job_teplate_go
  before_script:
    - apk add --no-cache curl make
    - curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $GOPATH/bin v2.8.1
  script:
    - gosec ./...
  rules:
   # TODO: enable
    - when: never

gotest:
  extends:
    - .job_teplate_go
  coverage: '/coverage: \d+.\d+% of statements/'
  variables:
    CGO_CFLAGS: "-g -O2 -Wno-return-local-addr"
  before_script:
    - apk add --no-cache make git gcc musl-dev
    - go install gotest.tools/gotestsum@latest
  script:
    - $GOPATH/bin/gotestsum --junitfile report.xml --format testname -- -tags=unit ./...
  allow_failure: true # recommended
  artifacts:
    when: always
    reports:
      junit: report.xml
  rules:
    - when: always

golint:
  extends:
    - .job_teplate_go
  image:
    name: golangci/golangci-lint:v1.49.0-alpine
    entrypoint: [""]
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
    expire_in: 7 days
  before_script:
    - apk add --no-cache jq
    - go mod vendor
  script:
    # Use default .golangci.yml file from the image if one is not present in the project root.
    - "[ -e .golangci.yml ] || cp /golangci/.golangci.yml ."
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    - golangci-lint run --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  rules:
    - when: always

go_fuzz_test:
  extends: .fuzz_base
  stage: test
  image: golang:1.19-alpine
  variables:
    CI_SEED_CORPUS: './seed_corpus'
  before_script:
    - apk add --no-cache clang git
  script:
    # link package
    - GITLAB_COV_FUZZ_PATH=`pwd`
    - cd $CI_PROJECT_DIR/internal/api/domain/link
    - go-fuzz-build -libfuzzer -o link_fuzz_target.a .
    - clang -fsanitize=fuzzer link_fuzz_target.a -o link_fuzz_target
    - $GITLAB_COV_FUZZ_PATH/gitlab-cov-fuzz run --regression=$REGRESSION -- ./link_fuzz_target
  rules:
    - when: always
