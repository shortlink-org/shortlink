include:
  - template: API-Fuzzing.gitlab-ci.yml
  - template: Verify/Load-Performance-Testing.gitlab-ci.yml

# API-Fuzzing ==========================================================================================================
# Read more about this feature here: https://docs.gitlab.com/ee/user/application_security/api_fuzzing/

# Configure the scanning tool through the environment variables.
# List of the variables: https://docs.gitlab.com/ee/user/application_security/api_fuzzing/#available-variables
# How to set: https://docs.gitlab.com/ee/ci/yaml/#variables

variables:
  FUZZAPI_PROFILE: Quick-10
  # Perform testing using a Postman Collection v2.1
  # All of the APIs defined in the collection will be
  # tested.
  FUZZAPI_POSTMAN_COLLECTION: ./docs/shortlink.postman_collection.json
  #
  # The target API instance to be tested. This must be
  # a test deployment. NEVER fuzz a production environment.
  FUZZAPI_TARGET_URL: ${FUZZAPI_TARGET_URL}
  #
  # Provide auth token for target being tested. This variable
  # is set in the CI configuration as a secret.
  # FUZZAPI_OVERRIDES_ENV: '{"headers":{"Authorization":"Token REDACTED"}}'

apifuzzer_fuzz_unlicensed:
  stage: qa
  rules:
    - when: never

# TODO: fix
apifuzzer_fuzz:
  stage: qa
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success

# TODO: fix
apifuzzer_fuzz_dnd:
  stage: qa
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success

# PERFORMANCE ==========================================================================================================

# TODO: fix
# Read more about the feature here: https://docs.gitlab.com/ee/user/project/merge_requests/load_performance_testing.html
load_performance:
  stage: qa
  variables:
    K6_TEST_FILE: ops/scripts/k6.js
  needs: []
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
