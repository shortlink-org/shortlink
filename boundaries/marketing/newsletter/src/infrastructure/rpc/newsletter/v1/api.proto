syntax = "proto3";

package infrastructure.rpc.newsletter.v1;

import "google/protobuf/empty.proto";
import "infrastructure/rpc/newsletter/v1/newsletter.proto";

// NewsletterService is the service that provides newsletter operations.
service NewsletterService {
  // Get returns the newsletter for a given email.
  rpc Get(GetRequest) returns (GetResponse) {}
  // Subscribe subscribes the user to the newsletter.
  rpc Subscribe(SubscribeRequest) returns (google.protobuf.Empty) {}
  // UnSubscribe unsubscribes the user from the newsletter.
  rpc UnSubscribe(UnSubscribeRequest) returns (google.protobuf.Empty) {}

  // Admin methods:
  // List returns all newsletters.
  rpc List(google.protobuf.Empty) returns (ListResponse) {}
  // UpdateStatus updates the active status of multiple newsletters.
  rpc UpdateStatus(UpdateStatusRequest) returns (google.protobuf.Empty) {}
  // Delete deletes multiple newsletters, either soft or hard delete.
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {}
}

// GetRequest is the request message containing the user's email.
message GetRequest {
  // The email of the newsletter subscriber to retrieve.
  string email = 1;
}

// GetResponse is the response message containing the newsletter details.
message GetResponse {
  // The email of the newsletter subscriber.
  string email = 1;
  // The active status of the newsletter (true for active, false for inactive).
  bool active = 2;
}

// SubscribeRequest is the request message containing the user's email.
message SubscribeRequest {
  // The email of the user to subscribe to the newsletter.
  string email = 1;
}

// UnSubscribeRequest is the request message containing the user's email.
message UnSubscribeRequest {
  // The email of the user to unsubscribe from the newsletter.
  string email = 1;
}

// ListResponse is the response message containing a list of all newsletters.
message ListResponse {
  // A list of all newsletters with their details.
  repeated Newsletter newsletters = 1;
}

// UpdateStatusRequest is the request message for updating the active status of multiple newsletters.
message UpdateStatusRequest {
  // A list of email addresses of newsletters to update.
  repeated string emails = 1;
  // The active status to be applied to the newsletters (true for active, false for inactive).
  bool active = 2;
}

// DeleteRequest is the request message for deleting multiple newsletters.
message DeleteRequest {
  // A list of email addresses of newsletters to delete.
  repeated string emails = 1;
  // The type of delete operation (soft or hard).
  DeleteType delete_type = 2;
}

// DeleteType is an enum specifying whether the delete operation is soft or hard.
enum DeleteType {
  // Unspecified delete type.
  DELETE_TYPE_UNSPECIFIED = 0;
  // Soft delete, marking the newsletter as deleted without permanent removal.
  DELETE_TYPE_SOFT_DELETE = 1;
  // Hard delete, permanently removing the newsletter.
  DELETE_TYPE_HARD_DELETE = 2;
}
