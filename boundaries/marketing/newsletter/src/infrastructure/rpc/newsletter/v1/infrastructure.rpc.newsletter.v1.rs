// @generated
// This file is @generated by prost-build.
/// Newsletter
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Newsletter {
    /// Field mask to be used for update operations.
    #[prost(message, optional, tag="3")]
    pub field_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// The unique identifier of the newsletter.
    #[prost(string, tag="1")]
    pub email: ::prost::alloc::string::String,
    /// Status of the newsletter.
    #[prost(bool, tag="2")]
    pub active: bool,
}
/// NewsletterList
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Newsletters {
    /// List of newsletters.
    #[prost(message, repeated, tag="1")]
    pub list: ::prost::alloc::vec::Vec<Newsletter>,
}
/// GetRequest is the request message containing the user's email.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRequest {
    /// The email of the newsletter subscriber to retrieve.
    #[prost(string, tag="1")]
    pub email: ::prost::alloc::string::String,
}
/// GetResponse is the response message containing the newsletter details.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResponse {
    /// The email of the newsletter subscriber.
    #[prost(string, tag="1")]
    pub email: ::prost::alloc::string::String,
    /// The active status of the newsletter (true for active, false for inactive).
    #[prost(bool, tag="2")]
    pub active: bool,
}
/// SubscribeRequest is the request message containing the user's email.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeRequest {
    /// The email of the user to subscribe to the newsletter.
    #[prost(string, tag="1")]
    pub email: ::prost::alloc::string::String,
}
/// UnSubscribeRequest is the request message containing the user's email.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnSubscribeRequest {
    /// The email of the user to unsubscribe from the newsletter.
    #[prost(string, tag="1")]
    pub email: ::prost::alloc::string::String,
}
/// ListResponse is the response message containing a list of all newsletters.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListResponse {
    /// A list of all newsletters with their details.
    #[prost(message, repeated, tag="1")]
    pub newsletters: ::prost::alloc::vec::Vec<Newsletter>,
}
/// UpdateStatusRequest is the request message for updating the active status of multiple newsletters.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateStatusRequest {
    /// A list of email addresses of newsletters to update.
    #[prost(string, repeated, tag="1")]
    pub emails: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The active status to be applied to the newsletters (true for active, false for inactive).
    #[prost(bool, tag="2")]
    pub active: bool,
}
/// DeleteRequest is the request message for deleting multiple newsletters.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRequest {
    /// A list of email addresses of newsletters to delete.
    #[prost(string, repeated, tag="1")]
    pub emails: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The type of delete operation (soft or hard).
    #[prost(enumeration="DeleteType", tag="2")]
    pub delete_type: i32,
}
/// DeleteType is an enum specifying whether the delete operation is soft or hard.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DeleteType {
    /// Unspecified delete type.
    Unspecified = 0,
    /// Soft delete, marking the newsletter as deleted without permanent removal.
    SoftDelete = 1,
    /// Hard delete, permanently removing the newsletter.
    HardDelete = 2,
}
impl DeleteType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DeleteType::Unspecified => "DELETE_TYPE_UNSPECIFIED",
            DeleteType::SoftDelete => "DELETE_TYPE_SOFT_DELETE",
            DeleteType::HardDelete => "DELETE_TYPE_HARD_DELETE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DELETE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "DELETE_TYPE_SOFT_DELETE" => Some(Self::SoftDelete),
            "DELETE_TYPE_HARD_DELETE" => Some(Self::HardDelete),
            _ => None,
        }
    }
}
include!("infrastructure.rpc.newsletter.v1.tonic.rs");
// @@protoc_insertion_point(module)