// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package metadata_di

import (
	"context"
	"github.com/google/wire"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/shortlink-org/go-sdk/auth/permission"
	"github.com/shortlink-org/go-sdk/cache"
	"github.com/shortlink-org/go-sdk/config"
	"github.com/shortlink-org/go-sdk/context"
	"github.com/shortlink-org/go-sdk/db"
	"github.com/shortlink-org/go-sdk/flags"
	"github.com/shortlink-org/go-sdk/grpc"
	"github.com/shortlink-org/go-sdk/logger"
	"github.com/shortlink-org/go-sdk/mq"
	"github.com/shortlink-org/go-sdk/notify"
	"github.com/shortlink-org/go-sdk/observability/metrics"
	"github.com/shortlink-org/go-sdk/observability/profiling"
	"github.com/shortlink-org/go-sdk/observability/tracing"
	"github.com/shortlink-org/go-sdk/s3"
	v1_2 "github.com/shortlink-org/shortlink/boundaries/metadata/internal/domain/metadata/v1"
	"github.com/shortlink-org/shortlink/boundaries/metadata/internal/infrastructure/mq"
	"github.com/shortlink-org/shortlink/boundaries/metadata/internal/infrastructure/repository/media"
	"github.com/shortlink-org/shortlink/boundaries/metadata/internal/infrastructure/repository/store"
	"github.com/shortlink-org/shortlink/boundaries/metadata/internal/infrastructure/rpc/metadata/v1"
	"github.com/shortlink-org/shortlink/boundaries/metadata/internal/usecases/metadata"
	"github.com/shortlink-org/shortlink/boundaries/metadata/internal/usecases/parsers"
	"github.com/shortlink-org/shortlink/boundaries/metadata/internal/usecases/screenshot"
	"go.opentelemetry.io/otel/sdk/metric"
	"go.opentelemetry.io/otel/trace"
)

// Injectors from wire.go:

func InitializeMetaDataService() (*MetaDataService, func(), error) {
	context, cleanup, err := ctx.New()
	if err != nil {
		return nil, nil, err
	}
	loggerLogger, cleanup2, err := logger.NewDefault(context)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	configConfig, err := config.New()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tracerProvider, cleanup3, err := tracing.New(context, loggerLogger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	monitoring, cleanup4, err := metrics.New(context, loggerLogger, tracerProvider)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pprofEndpoint, err := profiling.New(context, loggerLogger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	meterProvider := NewMeterProvider(monitoring)
	dbDB, err := db.New(context, loggerLogger, tracerProvider, meterProvider)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	metaStore, err := NewMetaDataStore(context, loggerLogger, dbDB)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	uc, err := NewParserUC(metaStore)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	mqMQ, err := mq.New(context, loggerLogger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	event, err := InitMetadataMQ(context, mqMQ)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	registry := NewPrometheusRegistry(monitoring)
	server, err := grpc.InitServer(context, loggerLogger, tracerProvider, registry)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	client, err := s3.New(context, loggerLogger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	service, err := NewMetaDataMediaStore(context, client)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	screenshotUC, err := NewScreenshotUC(context, service)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	metadataUC, err := NewMetadataUC(loggerLogger, uc, screenshotUC)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	metadata, err := NewMetaDataRPCServer(loggerLogger, server, uc, screenshotUC, metadataUC)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	metaDataService, err := NewMetaDataService(loggerLogger, configConfig, monitoring, tracerProvider, pprofEndpoint, uc, event, metadata, metaStore)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return metaDataService, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type MetaDataService struct {
	// Common
	Log    logger.Logger
	Config *config.Config

	// Observability
	Tracer        trace.TracerProvider
	Metrics       *metrics.Monitoring
	PprofEndpoint profiling.PprofEndpoint

	// Delivery
	metadataMQ        *metadata_mq.Event
	metadataRPCServer *v1.Metadata

	// Application
	service *parsers.UC

	// Repository
	metadataStore *storeRepository.MetaStore
}

// DefaultSet ==========================================================================================================
var DefaultSet = wire.NewSet(ctx.New, flags.New, config.New, logger.NewDefault, tracing.New, metrics.New, cache.New, profiling.New)

// MetaDataService =====================================================================================================
var MetaDataSet = wire.NewSet(
	DefaultSet, permission.New, mq.New, db.New, grpc.InitServer, s3.New, NewPrometheusRegistry,
	NewMeterProvider,

	InitMetadataMQ,
	NewMetaDataRPCServer,

	NewParserUC,
	NewScreenshotUC,
	NewMetadataUC,

	NewMetaDataStore,
	NewMetaDataMediaStore,

	NewMetaDataService,
)

func NewPrometheusRegistry(metrics2 *metrics.Monitoring) *prometheus.Registry {
	return metrics2.Prometheus
}

func NewMeterProvider(metrics2 *metrics.Monitoring) *metric.MeterProvider {
	return metrics2.Metrics
}

func InitMetadataMQ(ctx2 context.Context, dataBus mq.MQ) (*metadata_mq.Event, error) {
	metadataMQ, err := metadata_mq.New(dataBus)
	if err != nil {
		return nil, err
	}
	notify.Subscribe(v1_2.METHOD_ADD, metadataMQ)

	return metadataMQ, nil
}

func NewMetaDataStore(ctx2 context.Context, log logger.Logger, db2 db.DB) (*storeRepository.MetaStore, error) {
	store := &storeRepository.MetaStore{}
	metadataStore, err := store.Use(ctx2, log, db2)
	if err != nil {
		return nil, err
	}

	return metadataStore, nil
}

func NewMetaDataMediaStore(ctx2 context.Context, s3_2 *s3.Client) (*s3Repository.Service, error) {
	client, err := s3Repository.New(ctx2, s3_2)
	if err != nil {
		return nil, err
	}

	return client, nil
}

func NewParserUC(store *storeRepository.MetaStore) (*parsers.UC, error) {
	metadataService, err := parsers.New(store)
	if err != nil {
		return nil, err
	}

	return metadataService, nil
}

func NewScreenshotUC(ctx2 context.Context, media *s3Repository.Service) (*screenshot.UC, error) {
	metadataService, err := screenshot.New(ctx2, media)
	if err != nil {
		return nil, err
	}

	return metadataService, nil
}

func NewMetadataUC(log logger.Logger, parsersUC *parsers.UC, screenshotUC *screenshot.UC) (*metadata.UC, error) {
	metadataService, err := metadata.New(log, parsersUC, screenshotUC)
	if err != nil {
		return nil, err
	}

	return metadataService, nil
}

func NewMetaDataRPCServer(log logger.Logger, runRPCServer *grpc.Server, parsersUC *parsers.UC, screenshotUC *screenshot.UC, metadataUC *metadata.UC) (*v1.Metadata, error) {
	metadataRPCServer, err := v1.New(log, runRPCServer, parsersUC, screenshotUC, metadataUC)
	if err != nil {
		return nil, err
	}

	return metadataRPCServer, nil
}

func NewMetaDataService(

	log logger.Logger, config2 *config.Config, metrics2 *metrics.Monitoring,
	tracer trace.TracerProvider,
	pprofHTTP profiling.PprofEndpoint,

	service *parsers.UC,

	metadataMQ *metadata_mq.Event,
	metadataRPCServer *v1.Metadata,

	metadataStore *storeRepository.MetaStore,
) (*MetaDataService, error) {
	return &MetaDataService{

		Log:    log,
		Config: config2,

		Tracer:        tracer,
		Metrics:       metrics2,
		PprofEndpoint: pprofHTTP,

		service: service,

		metadataMQ:        metadataMQ,
		metadataRPCServer: metadataRPCServer,

		metadataStore: metadataStore,
	}, nil
}
