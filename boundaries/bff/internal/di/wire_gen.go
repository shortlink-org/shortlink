// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bff_di

import (
	linkv1grpc2 "buf.build/gen/go/shortlink-org/shortlink-link-link/grpc/go/infrastructure/rpc/cqrs/link/v1/linkv1grpc"
	"buf.build/gen/go/shortlink-org/shortlink-link-link/grpc/go/infrastructure/rpc/link/v1/linkv1grpc"
	"buf.build/gen/go/shortlink-org/shortlink-link-link/grpc/go/infrastructure/rpc/sitemap/v1/sitemapv1grpc"
	"context"
	"github.com/google/wire"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/shortlink-org/go-sdk/config"
	"github.com/shortlink-org/go-sdk/grpc"
	"github.com/shortlink-org/go-sdk/logger"
	"github.com/shortlink-org/shortlink/boundaries/link/bff/internal/infrastructure/http"
	"github.com/shortlink-org/shortlink/boundaries/link/bff/internal/pkg/i18n"
	"github.com/shortlink-org/shortlink/pkg/di"
	"github.com/shortlink-org/shortlink/pkg/di/pkg/context"
	"github.com/shortlink-org/shortlink/pkg/di/pkg/logger"
	"github.com/shortlink-org/shortlink/pkg/di/pkg/permission"
	"github.com/shortlink-org/shortlink/pkg/di/pkg/profiling"
	"github.com/shortlink-org/shortlink/pkg/di/pkg/traicing"
	"github.com/shortlink-org/go-sdk/observability/metrics"
	"go.opentelemetry.io/otel/trace"
	"golang.org/x/text/message"
	grpc2 "google.golang.org/grpc"
)

// Injectors from wire.go:

func InitializeBFFWebService() (*BFFWebService, func(), error) {
	context, cleanup, err := ctx.New()
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2, err := logger_di.New(context)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	configConfig, err := config.New()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tracerProvider, cleanup3, err := traicing_di.New(context, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	monitoring, cleanup4, err := metrics.New(context, logger, tracerProvider)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	pprofEndpoint, err := profiling.New(context, logger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	printer := i18n.New(context)
	registry := NewPrometheusRegistry(monitoring)
	server, err := grpc.InitServer(context, logger, tracerProvider, registry)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	clientConn, cleanup5, err := NewRPCClient(context, logger, monitoring, tracerProvider)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	linkServiceClient, err := NewLinkRPCClient(clientConn)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	linkCommandServiceClient, err := NewLinkCommandRPCClient(clientConn)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	linkQueryServiceClient, err := NewLinkQueryRPCClient(clientConn)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sitemapServiceClient, err := NewSitemapServiceClient(clientConn)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	httpServer, err := NewAPIApplication(context, printer, logger, configConfig, tracerProvider, monitoring, pprofEndpoint, server, linkServiceClient, linkCommandServiceClient, linkQueryServiceClient, sitemapServiceClient)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	bffWebService := NewBFFWebService(context, logger, configConfig, tracerProvider, monitoring, pprofEndpoint, httpServer)
	return bffWebService, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type BFFWebService struct {
	// Common
	Log    logger.Logger
	Config *config.Config
	i18n   *message.Printer

	// Delivery
	httpAPIServer *http.Server

	// Observability
	Tracer        trace.TracerProvider
	Metrics       *metrics.Monitoring
	PprofEndpoint profiling.PprofEndpoint
}

// BFFWebService =======================================================================================================
var BFFWebServiceSet = wire.NewSet(di.DefaultSet, permission.New, i18n.New, NewPrometheusRegistry, grpc.InitServer, NewRPCClient,

	NewLinkRPCClient,
	NewLinkCommandRPCClient,
	NewLinkQueryRPCClient,
	NewSitemapServiceClient,

	NewAPIApplication,
	NewBFFWebService,
)

func NewPrometheusRegistry(metrics2 *metrics.Monitoring) *prometheus.Registry {
	return metrics2.Prometheus
}

func NewRPCClient(ctx2 context.Context,

	log logger.Logger, metrics2 *metrics.Monitoring,
	tracer trace.TracerProvider,
) (*grpc2.ClientConn, func(), error) {

	opts := []grpc.Option{grpc.WithSession(), grpc.WithMetrics(metrics2.Prometheus), grpc.WithTracer(tracer, metrics2.Prometheus, metrics2.Metrics), grpc.WithTimeout(), grpc.WithLogger(log)}

	runRPCClient, cleanup, err := grpc.InitClient(ctx2, log, opts...)
	if err != nil {
		return nil, nil, err
	}

	return runRPCClient, cleanup, nil
}

func NewLinkRPCClient(runRPCClient *grpc2.ClientConn) (linkv1grpc.LinkServiceClient, error) {
	return linkv1grpc.NewLinkServiceClient(runRPCClient), nil
}

func NewLinkCommandRPCClient(runRPCClient *grpc2.ClientConn) (linkv1grpc2.LinkCommandServiceClient, error) {
	return linkv1grpc2.NewLinkCommandServiceClient(runRPCClient), nil
}

func NewLinkQueryRPCClient(runRPCClient *grpc2.ClientConn) (linkv1grpc2.LinkQueryServiceClient, error) {
	return linkv1grpc2.NewLinkQueryServiceClient(runRPCClient), nil
}

func NewSitemapServiceClient(runRPCClient *grpc2.ClientConn) (sitemapv1grpc.SitemapServiceClient, error) {
	return sitemapv1grpc.NewSitemapServiceClient(runRPCClient), nil
}

func NewAPIApplication(ctx2 context.Context, i18n2 *message.Printer,
	log logger.Logger, config2 *config.Config,

	tracer trace.TracerProvider, metrics2 *metrics.Monitoring,
	pprofEndpoint profiling.PprofEndpoint,

	rpcServer *grpc.Server,
	link_rpc linkv1grpc.LinkServiceClient,
	link_command linkv1grpc2.LinkCommandServiceClient,
	link_query linkv1grpc2.LinkQueryServiceClient,
	sitemap_rpc sitemapv1grpc.SitemapServiceClient,
) (*http.Server, error) {
	apiService, err := http.New(http.Config{

		Ctx:    ctx2,
		I18n:   i18n2,
		Log:    log,
		Config: config2,

		Tracer:        tracer,
		Metrics:       metrics2,
		PprofEndpoint: pprofEndpoint,

		RpcServer: rpcServer,

		Link_rpc:     link_rpc,
		Link_command: link_command,
		Link_query:   link_query,
		Sitemap_rpc:  sitemap_rpc,
	}, log)
	if err != nil {
		return nil, err
	}

	return apiService, nil
}

func NewBFFWebService(ctx2 context.Context,

	log logger.Logger, config2 *config.Config,

	tracer trace.TracerProvider, metrics2 *metrics.Monitoring,
	pprofEndpoint profiling.PprofEndpoint,

	httpAPIServer *http.Server,
) *BFFWebService {
	return &BFFWebService{

		Log:    log,
		Config: config2,

		Tracer:        tracer,
		Metrics:       metrics2,
		PprofEndpoint: pprofEndpoint,

		httpAPIServer: httpAPIServer,
	}
}
