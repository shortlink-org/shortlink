schema
@server(port: 8100)
@upstream(
  allowedHeaders: ["Authorization", "user-id"]
)
@telemetry(
  export: {
    prometheus: {
      path: "/metrics"
    }
#    otlp: {
#      url: "http://127.0.0.1"
#    }
  }
)
@link(type: Script, src: "scripts/auth.js")
@link(src: "http://localhost:50051", type: Grpc) {
  query: Query
  mutation: Mutation
}

type CartItem {
  productId: String
  quantity: Int
}

type CartState {
  cartId: String
  customerId: String
  items: [CartItem]
#  createdAt: String  # ISO8601 timestamp
#  updatedAt: String  # ISO8601 timestamp
}

type GetCartResponse {
  state: CartState
}

type CartRequest {
  customerId: String
}

type Query {
  getCart(customerId: CartRequest): GetCartResponse
  @grpc(
    url: "http://localhost:50051"
    method: "infrastructure.rpc.cart.v1.CartService.Get"
    body: "{{.args.customerId}}"
    headers: [
      {key: "user-id", value: "3e173751-8840-4b0d-8065-fbea88357cc5"}
    ]
  )
}

input ItemRequest {
  customerId: String!
  items: [CartItemInput!]!
}

type Mutation {
  addItem(addRequest: ItemRequest): Empty!
  @grpc(
    url: "http://localhost:50051"
    method: "infrastructure.rpc.cart.v1.CartService.Add"
    body: "{{.args.addRequest}}"
    headers: [
      {key: "user-id", value: "3e173751-8840-4b0d-8065-fbea88357cc5"}
    ]
  )

  removeItem(removeRequest: ItemRequest): Empty!
  @grpc(
    url: "http://localhost:50051"
    method: "infrastructure.rpc.cart.v1.CartService.Remove"
    body: "{{.args.removeRequest}}"
    headers: [
      {key: "user-id", value: "3e173751-8840-4b0d-8065-fbea88357cc5"}
    ]
  )

  resetCart(customerId: CartRequest): Empty!
  @grpc(
    url: "http://localhost:50051"
    method: "infrastructure.rpc.cart.v1.CartService.Reset"
    body: "{{.args.customerId}}"
    headers: [
      {key: "user-id", value: "3e173751-8840-4b0d-8065-fbea88357cc5"}
    ]
  )
}

input CartItemInput {
  productId: String!
  quantity: Int!
}
