// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: infrastructure/rpc/sitemap/v1/sitemap.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SitemapService_Parse_FullMethodName = "/infrastructure.rpc.sitemap.v1.SitemapService/Parse"
)

// SitemapServiceClient is the client API for SitemapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SitemapServiceClient interface {
	// Parse parses a sitemap.
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sitemapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSitemapServiceClient(cc grpc.ClientConnInterface) SitemapServiceClient {
	return &sitemapServiceClient{cc}
}

func (c *sitemapServiceClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SitemapService_Parse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SitemapServiceServer is the server API for SitemapService service.
// All implementations must embed UnimplementedSitemapServiceServer
// for forward compatibility
type SitemapServiceServer interface {
	// Parse parses a sitemap.
	Parse(context.Context, *ParseRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSitemapServiceServer()
}

// UnimplementedSitemapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSitemapServiceServer struct {
}

func (UnimplementedSitemapServiceServer) Parse(context.Context, *ParseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedSitemapServiceServer) mustEmbedUnimplementedSitemapServiceServer() {}

// UnsafeSitemapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SitemapServiceServer will
// result in compilation errors.
type UnsafeSitemapServiceServer interface {
	mustEmbedUnimplementedSitemapServiceServer()
}

func RegisterSitemapServiceServer(s grpc.ServiceRegistrar, srv SitemapServiceServer) {
	s.RegisterService(&SitemapService_ServiceDesc, srv)
}

func _SitemapService_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitemapServiceServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SitemapService_Parse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitemapServiceServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SitemapService_ServiceDesc is the grpc.ServiceDesc for SitemapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SitemapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infrastructure.rpc.sitemap.v1.SitemapService",
	HandlerType: (*SitemapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Parse",
			Handler:    _SitemapService_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infrastructure/rpc/sitemap/v1/sitemap.proto",
}
