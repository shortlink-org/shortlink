// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AddLink defines model for AddLink.
type AddLink struct {
	// Describe Description of the link.
	Describe *string `json:"describe,omitempty"`

	// Url The URL of the link.
	Url string `json:"url"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Messages An array of human-readable messages providing more details about the error.
	Messages *[]string `json:"messages,omitempty"`
}

// Link defines model for Link.
type Link struct {
	// CreatedAt Timestamp when the link was created.
	CreatedAt time.Time `json:"created_at"`

	// Describe Description of the link.
	Describe string `json:"describe"`

	// Hash Unique hash, used as the short link.
	Hash string `json:"hash"`

	// UpdatedAt Timestamp when the link was last updated.
	UpdatedAt time.Time `json:"updated_at"`

	// Url The URL of the link.
	Url string `json:"url"`
}

// LinkFilter defines model for LinkFilter.
type LinkFilter struct {
	// Id Unique identifier of the link. Use this to update a specific link.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// UrlContains Filter links that contain this text in their URL.
	UrlContains *string `json:"urlContains,omitempty"`
}

// AddSitemap200Response defines model for addSitemap_200_response.
type AddSitemap200Response struct {
	// Message A confirmation message.
	Message *string `json:"message,omitempty"`
}

// AddSitemapRequest defines model for addSitemap_request.
type AddSitemapRequest struct {
	// Url The URL of the sitemap.
	Url string `json:"url"`
}

// GetLinks200Response defines model for getLinks_200_response.
type GetLinks200Response struct {
	Links []Link `json:"links"`

	// NextCursor A cursor to be used to fetch the next page of results.
	NextCursor string `json:"next_cursor"`
}

// UpdateLinks200Response defines model for updateLinks_200_response.
type UpdateLinks200Response struct {
	// UpdatedCount The number of links updated.
	UpdatedCount *int `json:"updatedCount,omitempty"`
}

// UpdateLinksRequest defines model for updateLinks_request.
type UpdateLinksRequest struct {
	Filter *LinkFilter `json:"filter,omitempty"`
	Link   *Link       `json:"link,omitempty"`
}

// AddLinkRequest defines model for AddLinkRequest.
type AddLinkRequest = AddLink

// SitemapRequest defines model for SitemapRequest.
type SitemapRequest = AddSitemapRequest

// UpdateLinkRequest defines model for UpdateLinkRequest.
type UpdateLinkRequest = UpdateLinksRequest

// GetLinksParams defines parameters for GetLinks.
type GetLinksParams struct {
	// Limit The number of items to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor A cursor for use in pagination. This is the ID of the last item in the previous page.
	Cursor *string     `form:"cursor,omitempty" json:"cursor,omitempty"`
	Filter *LinkFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// AddLinkJSONRequestBody defines body for AddLink for application/json ContentType.
type AddLinkJSONRequestBody = AddLink

// UpdateLinksJSONRequestBody defines body for UpdateLinks for application/json ContentType.
type UpdateLinksJSONRequestBody = UpdateLinksRequest

// AddSitemapJSONRequestBody defines body for AddSitemap for application/json ContentType.
type AddSitemapJSONRequestBody = AddSitemapRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List links
	// (GET /links)
	GetLinks(w http.ResponseWriter, r *http.Request, params GetLinksParams)
	// Add link
	// (POST /links)
	AddLink(w http.ResponseWriter, r *http.Request)
	// Update links
	// (PUT /links)
	UpdateLinks(w http.ResponseWriter, r *http.Request)
	// Delete link
	// (DELETE /links/{hash})
	DeleteLink(w http.ResponseWriter, r *http.Request, hash string)
	// Get link
	// (GET /links/{hash})
	GetLink(w http.ResponseWriter, r *http.Request, hash string)
	// Add Sitemap
	// (POST /sitemap)
	AddSitemap(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List links
// (GET /links)
func (_ Unimplemented) GetLinks(w http.ResponseWriter, r *http.Request, params GetLinksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add link
// (POST /links)
func (_ Unimplemented) AddLink(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update links
// (PUT /links)
func (_ Unimplemented) UpdateLinks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete link
// (DELETE /links/{hash})
func (_ Unimplemented) DeleteLink(w http.ResponseWriter, r *http.Request, hash string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get link
// (GET /links/{hash})
func (_ Unimplemented) GetLink(w http.ResponseWriter, r *http.Request, hash string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add Sitemap
// (POST /sitemap)
func (_ Unimplemented) AddSitemap(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetLinks operation middleware
func (siw *ServerInterfaceWrapper) GetLinks(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLinksParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLinks(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AddLink operation middleware
func (siw *ServerInterfaceWrapper) AddLink(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddLink(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateLinks operation middleware
func (siw *ServerInterfaceWrapper) UpdateLinks(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateLinks(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteLink operation middleware
func (siw *ServerInterfaceWrapper) DeleteLink(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameterWithOptions("simple", "hash", chi.URLParam(r, "hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteLink(w, r, hash)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLink operation middleware
func (siw *ServerInterfaceWrapper) GetLink(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameterWithOptions("simple", "hash", chi.URLParam(r, "hash"), &hash, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLink(w, r, hash)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// AddSitemap operation middleware
func (siw *ServerInterfaceWrapper) AddSitemap(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddSitemap(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/links", wrapper.GetLinks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/links", wrapper.AddLink)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/links", wrapper.UpdateLinks)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/links/{hash}", wrapper.DeleteLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/links/{hash}", wrapper.GetLink)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sitemap", wrapper.AddSitemap)
	})

	return r
}
