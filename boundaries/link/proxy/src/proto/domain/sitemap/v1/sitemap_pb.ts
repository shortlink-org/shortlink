// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file domain/sitemap/v1/sitemap.proto (package domain.sitemap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * URL is a structure of <url> in <sitemap>
 *
 * @generated from message domain.sitemap.v1.Url
 */
export class Url extends Message<Url> {
  /**
   * loc is a structure of <loc> in <url>
   *
   * @generated from field: string loc = 1;
   */
  loc = "";

  /**
   * lastmod is a structure of <lastmod> in <url>
   *
   * @generated from field: string last_mod = 2;
   */
  lastMod = "";

  /**
   * changefreq is a structure of <changefreq> in <url>
   *
   * @generated from field: string change_freq = 3;
   */
  changeFreq = "";

  /**
   * priority is a structure of <priority> in <url>
   *
   * @generated from field: float priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<Url>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "domain.sitemap.v1.Url";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "loc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_mod", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "change_freq", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Url {
    return new Url().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Url {
    return new Url().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Url {
    return new Url().fromJsonString(jsonString, options);
  }

  static equals(a: Url | PlainMessage<Url> | undefined, b: Url | PlainMessage<Url> | undefined): boolean {
    return proto3.util.equals(Url, a, b);
  }
}

/**
 * Sitemap is a structure of <sitemap>
 *
 * @generated from message domain.sitemap.v1.Sitemap
 */
export class Sitemap extends Message<Sitemap> {
  /**
   * Url is a structure of <url> in <sitemap>
   *
   * @generated from field: repeated domain.sitemap.v1.Url url = 1;
   */
  url: Url[] = [];

  constructor(data?: PartialMessage<Sitemap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "domain.sitemap.v1.Sitemap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "message", T: Url, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sitemap {
    return new Sitemap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sitemap {
    return new Sitemap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sitemap {
    return new Sitemap().fromJsonString(jsonString, options);
  }

  static equals(a: Sitemap | PlainMessage<Sitemap> | undefined, b: Sitemap | PlainMessage<Sitemap> | undefined): boolean {
    return proto3.util.equals(Sitemap, a, b);
  }
}

