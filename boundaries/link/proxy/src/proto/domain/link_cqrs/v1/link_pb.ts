// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file domain/link_cqrs/v1/link.proto (package domain.link_cqrs.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Link
 *
 * @generated from message domain.link_cqrs.v1.LinkView
 */
export class LinkView extends Message<LinkView> {
  /**
   * FieldMask
   *
   * @generated from field: google.protobuf.FieldMask field_mask = 9;
   */
  fieldMask?: FieldMask;

  /**
   * URL
   *
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * Hash by URL + salt
   *
   * @generated from field: string hash = 2;
   */
  hash = "";

  /**
   * Describe of link
   *
   * @generated from field: string describe = 3;
   */
  describe = "";

  /**
   * Metadata
   *
   * @generated from field: string image_url = 4;
   */
  imageUrl = "";

  /**
   * Meta description
   *
   * @generated from field: string meta_description = 5;
   */
  metaDescription = "";

  /**
   * Meta keywords
   *
   * @generated from field: string meta_keywords = 6;
   */
  metaKeywords = "";

  /**
   * Create at
   *
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * Update at
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 8;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<LinkView>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "domain.link_cqrs.v1.LinkView";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 9, name: "field_mask", kind: "message", T: FieldMask },
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "describe", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "image_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "meta_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "meta_keywords", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
    { no: 8, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinkView {
    return new LinkView().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinkView {
    return new LinkView().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinkView {
    return new LinkView().fromJsonString(jsonString, options);
  }

  static equals(a: LinkView | PlainMessage<LinkView> | undefined, b: LinkView | PlainMessage<LinkView> | undefined): boolean {
    return proto3.util.equals(LinkView, a, b);
  }
}

/**
 * Links
 *
 * @generated from message domain.link_cqrs.v1.LinksView
 */
export class LinksView extends Message<LinksView> {
  /**
   * Links
   *
   * @generated from field: repeated domain.link_cqrs.v1.LinkView links = 1;
   */
  links: LinkView[] = [];

  constructor(data?: PartialMessage<LinksView>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "domain.link_cqrs.v1.LinksView";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "links", kind: "message", T: LinkView, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LinksView {
    return new LinksView().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LinksView {
    return new LinksView().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LinksView {
    return new LinksView().fromJsonString(jsonString, options);
  }

  static equals(a: LinksView | PlainMessage<LinksView> | undefined, b: LinksView | PlainMessage<LinksView> | undefined): boolean {
    return proto3.util.equals(LinksView, a, b);
  }
}

