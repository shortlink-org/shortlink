// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file domain/proxy/v1/proxy.proto (package domain.proxy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * Stats is a proxy stats
 *
 * @generated from message domain.proxy.v1.Stats
 */
export class Stats extends Message<Stats> {
  /**
   * Field mask
   *
   * @generated from field: google.protobuf.FieldMask field_mask = 4;
   */
  fieldMask?: FieldMask;

  /**
   * Hash
   *
   * @generated from field: string hash = 1;
   */
  hash = "";

  /**
   * Count redirect
   *
   * @generated from field: uint64 count_redirect = 2;
   */
  countRedirect = protoInt64.zero;

  /**
   * Update at
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 3;
   */
  updatedAt?: Timestamp;

  constructor(data?: PartialMessage<Stats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "domain.proxy.v1.Stats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "field_mask", kind: "message", T: FieldMask },
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "count_redirect", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "updated_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Stats {
    return new Stats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Stats {
    return new Stats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Stats {
    return new Stats().fromJsonString(jsonString, options);
  }

  static equals(a: Stats | PlainMessage<Stats> | undefined, b: Stats | PlainMessage<Stats> | undefined): boolean {
    return proto3.util.equals(Stats, a, b);
  }
}

