// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file infrastructure/rpc/proxy/v1/proxy.proto (package infrastructure.rpc.proxy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Stats } from "../../../../domain/proxy/v1/proxy_pb.js";

/**
 * StatsRequest is the request for the Stats method.
 *
 * @generated from message infrastructure.rpc.proxy.v1.StatsRequest
 */
export class StatsRequest extends Message<StatsRequest> {
  /**
   * Hash is the hash of the proxy.
   *
   * @generated from field: string hash = 1;
   */
  hash = "";

  constructor(data?: PartialMessage<StatsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "infrastructure.rpc.proxy.v1.StatsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsRequest {
    return new StatsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsRequest {
    return new StatsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsRequest {
    return new StatsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StatsRequest | PlainMessage<StatsRequest> | undefined, b: StatsRequest | PlainMessage<StatsRequest> | undefined): boolean {
    return proto3.util.equals(StatsRequest, a, b);
  }
}

/**
 * StatsResponse is the response for the Stats method.
 *
 * @generated from message infrastructure.rpc.proxy.v1.StatsResponse
 */
export class StatsResponse extends Message<StatsResponse> {
  /**
   * Stats is the stats for the proxy.
   *
   * @generated from field: domain.proxy.v1.Stats stats = 1;
   */
  stats?: Stats;

  constructor(data?: PartialMessage<StatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "infrastructure.rpc.proxy.v1.StatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stats", kind: "message", T: Stats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsResponse {
    return new StatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsResponse {
    return new StatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsResponse {
    return new StatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StatsResponse | PlainMessage<StatsResponse> | undefined, b: StatsResponse | PlainMessage<StatsResponse> | undefined): boolean {
    return proto3.util.equals(StatsResponse, a, b);
  }
}

