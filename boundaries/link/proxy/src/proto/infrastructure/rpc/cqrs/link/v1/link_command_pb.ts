// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file infrastructure/rpc/cqrs/link/v1/link_command.proto (package infrastructure.rpc.cqrs.link.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Link } from "../../../../../domain/link/v1/link_pb.js";

/**
 * AddRequest is the request for adding a new link
 *
 * @generated from message infrastructure.rpc.cqrs.link.v1.AddRequest
 */
export class AddRequest extends Message<AddRequest> {
  /**
   * Link is the link to add
   *
   * @generated from field: domain.link.v1.Link link = 1;
   */
  link?: Link;

  constructor(data?: PartialMessage<AddRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "infrastructure.rpc.cqrs.link.v1.AddRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "link", kind: "message", T: Link },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddRequest {
    return new AddRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddRequest {
    return new AddRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddRequest {
    return new AddRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddRequest | PlainMessage<AddRequest> | undefined, b: AddRequest | PlainMessage<AddRequest> | undefined): boolean {
    return proto3.util.equals(AddRequest, a, b);
  }
}

/**
 * AddResponse is the response for adding a new link
 *
 * @generated from message infrastructure.rpc.cqrs.link.v1.AddResponse
 */
export class AddResponse extends Message<AddResponse> {
  /**
   * Link is the added link
   *
   * @generated from field: domain.link.v1.Link link = 1;
   */
  link?: Link;

  constructor(data?: PartialMessage<AddResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "infrastructure.rpc.cqrs.link.v1.AddResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "link", kind: "message", T: Link },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddResponse {
    return new AddResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddResponse {
    return new AddResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddResponse {
    return new AddResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddResponse | PlainMessage<AddResponse> | undefined, b: AddResponse | PlainMessage<AddResponse> | undefined): boolean {
    return proto3.util.equals(AddResponse, a, b);
  }
}

/**
 * UpdateRequest is the request for updating an existing link
 *
 * @generated from message infrastructure.rpc.cqrs.link.v1.UpdateRequest
 */
export class UpdateRequest extends Message<UpdateRequest> {
  /**
   * Link is the link to update
   *
   * @generated from field: domain.link.v1.Link link = 1;
   */
  link?: Link;

  constructor(data?: PartialMessage<UpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "infrastructure.rpc.cqrs.link.v1.UpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "link", kind: "message", T: Link },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRequest {
    return new UpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRequest {
    return new UpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRequest | PlainMessage<UpdateRequest> | undefined, b: UpdateRequest | PlainMessage<UpdateRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRequest, a, b);
  }
}

/**
 * UpdateResponse is the response for updating an existing link
 *
 * @generated from message infrastructure.rpc.cqrs.link.v1.UpdateResponse
 */
export class UpdateResponse extends Message<UpdateResponse> {
  /**
   * Link is the updated link
   *
   * @generated from field: domain.link.v1.Link link = 1;
   */
  link?: Link;

  constructor(data?: PartialMessage<UpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "infrastructure.rpc.cqrs.link.v1.UpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "link", kind: "message", T: Link },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResponse {
    return new UpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResponse {
    return new UpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResponse | PlainMessage<UpdateResponse> | undefined, b: UpdateResponse | PlainMessage<UpdateResponse> | undefined): boolean {
    return proto3.util.equals(UpdateResponse, a, b);
  }
}

/**
 * DeleteRequest is the request for deleting an existing link
 *
 * @generated from message infrastructure.rpc.cqrs.link.v1.DeleteRequest
 */
export class DeleteRequest extends Message<DeleteRequest> {
  /**
   * Hash is the hash of the link to delete
   *
   * @generated from field: string hash = 1;
   */
  hash = "";

  constructor(data?: PartialMessage<DeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "infrastructure.rpc.cqrs.link.v1.DeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRequest {
    return new DeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRequest | PlainMessage<DeleteRequest> | undefined, b: DeleteRequest | PlainMessage<DeleteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRequest, a, b);
  }
}

