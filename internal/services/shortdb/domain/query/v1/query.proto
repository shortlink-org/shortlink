syntax = "proto3";

package shortdb.domain.query.v1;

option go_package = "github.com/shortlink-org/shortlink/internal/services/shortdb/domain/query/v1";

import "google/protobuf/field_mask.proto";
import "shortdb/domain/field/v1/field.proto";
import "shortdb/domain/index/v1/index.proto";

// Type is the type of SQL query, e.g. SELECT/UPDATE
enum Type {
  // TYPE_UNSPECIFIED is the zero value for a Type
  TYPE_UNSPECIFIED = 0;

  // TYPE_SELECT represents a SELECT query
  TYPE_SELECT = 1;
  // TYPE_UPDATE represents an UPDATE query
  TYPE_UPDATE = 2;
  // TYPE_INSERT represents an INSERT query
  TYPE_INSERT = 3;
  // TYPE_DELETE represents a DELETE query
  TYPE_DELETE = 4;
  // TYPE_CREATE_TABLE represents a CREATE TABLE query
  TYPE_CREATE_TABLE = 5;
  // TYPE_DROP_TABLE represents a DROP TABLE query
  TYPE_DROP_TABLE = 6;
  // TYPE_CREATE_INDEX represents a CREATE INDEX query
  TYPE_CREATE_INDEX = 7;
  // TYPE_CREATE_INDEX represents a DELETE INDEX query
  TYPE_DELETE_INDEX = 8;
}

// Operator is between operands in a condition
enum Operator {
  // OPERATOR_UNSPECIFIED is the zero value for an Operator
  OPERATOR_UNSPECIFIED = 0;

  OPERATOR_EQ = 1;  // Eq -> "="
  OPERATOR_NE = 2;  // Ne -> "!="
  OPERATOR_GT = 3;  // Gt -> ">"
  OPERATOR_LT = 4;  // Lt -> "<"
  OPERATOR_GTE = 5; // Gte -> ">="
  OPERATOR_LTE = 6; // Lte -> "<="
}

// Condition is a single boolean condition in a WHERE clause
message Condition {
  // LValue is the left hand side operand
  string l_value = 1;
  // LValueIsField determines if Operand1 is a literal or a field name
  bool l_value_is_field = 2;

  // Operator is e.g. "=", ">"
  Operator operator = 3;

  // RValue is the right hand side operand
  string r_value = 4;
  // RValueIsField determines if Operand2 is a literal or a field name
  bool r_value_is_field = 5;
}

// Condition is a single boolean condition in a WHERE clause
message JoinCondition {
  // LHS table name
  string l_table = 1;
  // Level operand is the left hand side operand
  string l_operand = 2;
  // Operator is e.g. "=", ">"
  Operator operator = 3;
  // RHS table name
  string r_table = 4;
  // Right operand1 is the right hand side operand
  string r_operand = 5;
}

message Join {
  string type = 1;
  string table = 2;
  repeated JoinCondition conditions = 3;
}

// Query represents a parsed query
message Query {
  google.protobuf.FieldMask field_mask = 16;

  message Array {
    repeated string items = 1;
  }

  Type type = 1;
  string database = 2;
  string table_name = 3;
  map<string, shortdb.domain.field.v1.Type> table_fields = 4;
  repeated shortdb.domain.index.v1.Index indexs = 5;
  repeated Condition conditions = 6;
  map<string, string> updates = 7;
  repeated Array inserts = 8;
  // Used for SELECT (i.e. SELECTed field names) and INSERT (INSERTEDed field names)
  repeated string fields = 9;
  map<string, string> aliases = 10;
  repeated string order_fields = 11;
  repeated string order_dir = 12;
  repeated Join joins = 13;
  int32 max_rows = 14;
  int32 limit = 15;
}
