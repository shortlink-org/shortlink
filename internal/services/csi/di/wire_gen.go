// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package csi_di

import (
	"context"
	"github.com/batazor/shortlink/internal/di"
	"github.com/batazor/shortlink/internal/di/pkg/context"
	"github.com/batazor/shortlink/internal/di/pkg/logger"
	"github.com/batazor/shortlink/internal/pkg/logger"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeSCIDriver() (*Service, func(), error) {
	context, cleanup, err := ctx.New()
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2, err := logger_di.New(context)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	service, err := NewSCIDriver(logger, context)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return service, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

// Service - heplers
type Service struct {
	Ctx context.Context
	Log logger.Logger
}

// Context =============================================================================================================
func NewContext() (context.Context, func(), error) {
	ctx2 := context.Background()

	cb := func() {
		ctx2.
			Done()
	}

	return ctx2, cb, nil
}

// CSI =================================================================================================================
var CSISet = wire.NewSet(di.DefaultSet, NewSCIDriver)

func NewSCIDriver(log logger.Logger, ctx2 context.Context) (*Service, error) {
	return &Service{
		Ctx: ctx2,
		Log: log,
	}, nil
}
