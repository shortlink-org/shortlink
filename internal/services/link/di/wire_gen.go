// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package link_di

import (
	"context"
	"github.com/batazor/shortlink/internal/di"
	"github.com/batazor/shortlink/internal/di/pkg/context"
	"github.com/batazor/shortlink/internal/di/pkg/logger"
	"github.com/batazor/shortlink/internal/di/pkg/mq"
	"github.com/batazor/shortlink/internal/di/pkg/store"
	"github.com/batazor/shortlink/internal/di/pkg/traicing"
	"github.com/batazor/shortlink/internal/pkg/cache"
	"github.com/batazor/shortlink/internal/pkg/db"
	"github.com/batazor/shortlink/internal/pkg/logger"
	v1_4 "github.com/batazor/shortlink/internal/pkg/mq/v1"
	"github.com/batazor/shortlink/internal/services/link/application/link"
	"github.com/batazor/shortlink/internal/services/link/application/link_cqrs"
	"github.com/batazor/shortlink/internal/services/link/application/sitemap"
	"github.com/batazor/shortlink/internal/services/link/infrastructure/mq"
	v1_2 "github.com/batazor/shortlink/internal/services/link/infrastructure/rpc/cqrs/link/v1"
	"github.com/batazor/shortlink/internal/services/link/infrastructure/rpc/link/v1"
	"github.com/batazor/shortlink/internal/services/link/infrastructure/rpc/run"
	v1_3 "github.com/batazor/shortlink/internal/services/link/infrastructure/rpc/sitemap/v1"
	"github.com/batazor/shortlink/internal/services/link/infrastructure/store/cqrs/cqs"
	"github.com/batazor/shortlink/internal/services/link/infrastructure/store/cqrs/query"
	"github.com/batazor/shortlink/internal/services/link/infrastructure/store/crud"
	v1_5 "github.com/batazor/shortlink/internal/services/metadata/infrastructure/rpc/metadata/v1"
	"github.com/batazor/shortlink/pkg/rpc"
	cache2 "github.com/go-redis/cache/v8"
	"github.com/google/wire"
	"google.golang.org/grpc"
)

// Injectors from di.go:

func InitializeLinkService() (*LinkService, func(), error) {
	context, cleanup, err := ctx.New()
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2, err := logger_di.New(context)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	mq, cleanup3, err := mq_di.New(context, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tracerProvider, cleanup4, err := traicing_di.New(context, logger)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	clientConn, cleanup5, err := rpc.InitClient(logger, tracerProvider)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	metadataServiceClient, err := NewMetadataRPCClient(clientConn)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	dbStore, cleanup6, err := store.New(context, logger)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	cacheCache, err := cache.New(context)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	crudStore, err := NewLinkStore(context, logger, dbStore, cacheCache)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	service, err := NewLinkApplication(logger, mq, metadataServiceClient, crudStore)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	cqsStore, err := NewCQSLinkStore(context, logger, dbStore, cacheCache)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	queryStore, err := NewQueryLinkStore(context, logger, dbStore, cacheCache)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	link_cqrsService, err := NewLinkCQRSApplication(logger, cqsStore, queryStore)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sitemapService, err := NewSitemapApplication(logger, mq)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	event, err := InitLinkMQ(context, logger, mq, service)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rpcServer, cleanup7, err := rpc.InitServer(logger, tracerProvider)
	if err != nil {
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	link, err := NewLinkCQRSRPCServer(rpcServer, link_cqrsService, logger)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	v1Link, err := NewLinkRPCServer(rpcServer, service, logger)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	response, err := NewRunRPCServer(rpcServer, link, v1Link)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	sitemap, err := NewSitemapRPCServer(rpcServer, sitemapService, logger)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	linkService, err := NewLinkService(logger, service, link_cqrsService, sitemapService, event, response, v1Link, link, sitemap, crudStore, cqsStore, queryStore)
	if err != nil {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return linkService, func() {
		cleanup7()
		cleanup6()
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// di.go:

type LinkService struct {
	// Common
	Log logger.Logger

	// Delivery
	linkMQ            *api_mq.Event
	run               *run.Response
	linkRPCServer     *v1.Link
	linkCQRSRPCServer *v1_2.Link
	sitemapRPCServer  *v1_3.Sitemap

	// Application
	linkService     *link.Service
	linkCQRSService *link_cqrs.Service
	sitemapService  *sitemap.Service

	// Repository
	linkStore *crud.Store

	// CQRS
	cqsStore   *cqs.Store
	queryStore *query.Store
}

// LinkService =========================================================================================================
var LinkSet = wire.NewSet(di.DefaultSet, mq_di.New, rpc.InitServer, rpc.InitClient, store.New, InitLinkMQ,

	NewLinkRPCServer,
	NewLinkCQRSRPCServer,
	NewSitemapRPCServer,
	NewRunRPCServer,

	NewLinkRPCClient,
	NewMetadataRPCClient,

	NewLinkApplication,
	NewLinkCQRSApplication,
	NewSitemapApplication,

	NewLinkStore,
	NewCQSLinkStore,
	NewQueryLinkStore,

	NewLinkService,
)

func InitLinkMQ(ctx2 context.Context, log logger.Logger, mq v1_4.MQ, service *link.Service) (*api_mq.Event, error) {
	linkMQ, err := api_mq.New(mq, log, service)
	if err != nil {
		return nil, err
	}

	return linkMQ, nil
}

func NewLinkStore(ctx2 context.Context, logger2 logger.Logger, db2 *db.Store, cache3 *cache2.Cache) (*crud.Store, error) {
	linkStore, err := crud.New(ctx2, logger2, db2, cache3)
	if err != nil {
		return nil, err
	}

	return linkStore, nil
}

func NewCQSLinkStore(ctx2 context.Context, logger2 logger.Logger, db2 *db.Store, cache3 *cache2.Cache) (*cqs.Store, error) {
	store2, err := cqs.New(ctx2, logger2, db2, cache3)
	if err != nil {
		return nil, err
	}

	return store2, nil
}

func NewQueryLinkStore(ctx2 context.Context, logger2 logger.Logger, db2 *db.Store, cache3 *cache2.Cache) (*query.Store, error) {
	store2, err := query.New(ctx2, logger2, db2, cache3)
	if err != nil {
		return nil, err
	}

	return store2, nil
}

func NewLinkApplication(logger2 logger.Logger, mq v1_4.MQ, metadataService v1_5.MetadataServiceClient, store2 *crud.Store) (*link.Service, error) {
	linkService, err := link.New(logger2, mq, metadataService, store2)
	if err != nil {
		return nil, err
	}

	return linkService, nil
}

func NewLinkCQRSApplication(logger2 logger.Logger, cqsStore *cqs.Store, queryStore *query.Store) (*link_cqrs.Service, error) {
	linkCQRSService, err := link_cqrs.New(logger2, cqsStore, queryStore)
	if err != nil {
		return nil, err
	}

	return linkCQRSService, nil
}

func NewLinkRPCClient(runRPCClient *grpc.ClientConn) (v1.LinkServiceClient, error) {
	LinkServiceClient := v1.NewLinkServiceClient(runRPCClient)
	return LinkServiceClient, nil
}

func NewSitemapApplication(logger2 logger.Logger, mq v1_4.MQ) (*sitemap.Service, error) {
	sitemapService, err := sitemap.New(logger2, mq)
	if err != nil {
		return nil, err
	}

	return sitemapService, nil
}

func NewLinkCQRSRPCServer(runRPCServer *rpc.RPCServer, application *link_cqrs.Service, log logger.Logger) (*v1_2.Link, error) {
	linkRPCServer, err := v1_2.New(runRPCServer, application, log)
	if err != nil {
		return nil, err
	}

	return linkRPCServer, nil
}

func NewLinkRPCServer(runRPCServer *rpc.RPCServer, application *link.Service, log logger.Logger) (*v1.Link, error) {
	linkRPCServer, err := v1.New(runRPCServer, application, log)
	if err != nil {
		return nil, err
	}

	return linkRPCServer, nil
}

func NewSitemapRPCServer(runRPCServer *rpc.RPCServer, application *sitemap.Service, log logger.Logger) (*v1_3.Sitemap, error) {
	sitemapRPCServer, err := v1_3.New(runRPCServer, application, log)
	if err != nil {
		return nil, err
	}

	return sitemapRPCServer, nil
}

func NewRunRPCServer(runRPCServer *rpc.RPCServer, cqrsLinkRPC *v1_2.Link, linkRPC *v1.Link) (*run.Response, error) {
	return run.Run(runRPCServer)
}

func NewMetadataRPCClient(runRPCClient *grpc.ClientConn) (v1_5.MetadataServiceClient, error) {
	metadataRPCClient := v1_5.NewMetadataServiceClient(runRPCClient)
	return metadataRPCClient, nil
}

func NewLinkService(

	log logger.Logger,

	linkService *link.Service,
	linkCQRSService *link_cqrs.Service,
	sitemapService *sitemap.Service,

	linkMQ *api_mq.Event, run2 *run.Response,
	linkRPCServer *v1.Link,
	linkCQRSRPCServer *v1_2.Link,
	sitemapRPCServer *v1_3.Sitemap,

	linkStore *crud.Store,

	cqsStore *cqs.Store,
	queryStore *query.Store,
) (*LinkService, error) {
	return &LinkService{

		Log: log,

		linkService:     linkService,
		linkCQRSService: linkCQRSService,
		sitemapService:  sitemapService,

		run:               run2,
		linkRPCServer:     linkRPCServer,
		linkCQRSRPCServer: linkCQRSRPCServer,
		sitemapRPCServer:  sitemapRPCServer,
		linkMQ:            linkMQ,

		linkStore: linkStore,

		cqsStore:   cqsStore,
		queryStore: queryStore,
	}, nil
}
